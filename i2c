module i2c(sclk,sda_in,sda_out,rst);
input sclk;
input rst;
input sda_in;
output reg sda_out;//read data 
integer i;
reg[7:0]mem[99:0];
reg [7:0] addr;
reg [7:0] data;
reg ack=0;

reg x;


always@(posedge sclk)
begin
	 if(rst==1)begin 
		  sda_out=0;
	  end
	
	if(rst==0)begin 
		if(ack==0)begin
          for(i=0;i<=7;i=i+1)begin
            addr[i]=sda_in;
	   // $display("addr time sda_in=%b",sda_in);
	     @(posedge sclk);
    	 end
          ack=1;
        end
	//write operation
	if(addr[7]==1)begin
      for(i=0;i<=7;i=i+1)begin
        data[i]=sda_in;
//	$display("data time sda_in=%b",sda_in);
	@(posedge sclk);
      end
      mem[addr[6:0]]=data;
	  ack=0;
	end
	//read operation
	if(addr[7]==0)begin
      data=mem[addr[6:0]];
      for(i=0;i<=7;i=i+1)begin
	    //  $display("read data time");
			sda_out=data[i];
			@(posedge sclk);
		end
		ack=0;
	end
end
end

endmodule

//TB
module top;
  reg sclk;
  reg rst;
  reg sda_in;
  wire sda_out;
  reg [7:0] addr;
  reg [7:0] data;
  i2c uut(.sclk(sclk),.sda_in(sda_in),.sda_out(sda_out),.rst(rst));
  initial begin
    sclk=0;
    forever#5 sclk=~sclk;
  end
  initial begin
    rst=1;
    #10
    rst=0;
    addr=8'b10010100;
    data=8'b10111001;
    sda_in=addr[0];#10;
    sda_in=addr[1];#10;
    sda_in=addr[2];#10;
    sda_in=addr[3];#10;
    sda_in=addr[4];#10;
    sda_in=addr[5];#10;
    sda_in=addr[6];#10;
    sda_in=addr[7];
    #10;
    sda_in=data[0];#10;
    sda_in=data[1];#10;
    sda_in=data[2];#10;
    sda_in=data[3];#10;
    sda_in=data[4];#10;
    sda_in=data[5];#10;
    sda_in=data[6];#10;
    sda_in=data[7];#10;
    #10;
    //read operation
    addr=8'b00010100;
    sda_in=addr[0];#10;
    sda_in=addr[1];#10;
    sda_in=addr[2];#10;
    sda_in=addr[3];#10;
    sda_in=addr[4];#10;
    sda_in=addr[5];#10;
    sda_in=addr[6];#10;
    sda_in =addr[7];
    #10;

    #100;
    $finish;
  end
  initial begin
    $dumpfile("dump.vcd");
    $dumpvars;
  end
endmodule
